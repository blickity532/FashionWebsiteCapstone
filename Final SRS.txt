Blake Riley
Jesse Harlan
Application Developent
6/15/25

---

### Software Requirements Specification (SRS) â€” Dusti Project

#### 1. Introduction
The Dusti Project is a web-based application for managing an online fashion store, Dusti's Closet. It offers users the ability to browse products, book appointments, create accounts, and interact with various sections of the store.

---

#### 2. Purpose
The purpose of this project is to deliver a seamless, user-friendly experience for customers to explore products, schedule appointments, register accounts, and simulate payment processing for purchasing fashionable clothing.

---

#### 3. Scope
The final implementation includes:

- **Frontend:**
  - `products.html`: Displays available products with images, descriptions, and prices.
  - `orders.html`: Manages a shopping cart, with dynamic updates and checkout process.
  - `mock-stripe-payment.html`: Simulates payment processing with fields for card details.
  - `create-account.html`: Allows users to register accounts.
  - `about.html`: Offers information about Dusti's Closet.
  - `services.html`: Lists available services, including personal shopper options.
  - `schedule.html`: Enables appointment booking.
  - `blog.html`: Displays fashion and style blog posts.

- **Backend:**
  - `server.js`: Handles API requests for features such as appointment booking and account creation.
  - `appointments.json`: Stores appointment booking data.

---

#### 4. Functional Requirements

1. **Product Browsing:**
   - Users can view and explore product listings on `products.html`.
   - Each product shows an image, description, and price.

2. **Shopping Cart:**
   - Users can add products to a cart managed by `orders.html`.
   - The cart counter updates in real time.
   - Checkout redirects users to the mock payment page.

3. **Payment Processing:**
   - Users can input payment details in `mock-stripe-payment.html`.
   - Cardholder name, card number, expiration, and CVV fields are present.

4. **Account Creation:**
   - Users can create accounts through `create-account.html`.
   - Account data is sent to the backend for storage.

5. **Appointment Booking:**
   - Users can schedule appointments using `schedule.html`.
   - Appointment details are saved in `appointments.json`.

6. **Blog:**
   - Users can read blog posts on `blog.html`.

7. **Services:**
   - All available services are listed on `services.html`.

8. **About Page:**
   - Information about the store is provided on `about.html`.

---

#### 5. Non-Functional Requirements

- **Performance:** Application should load within 3 seconds on standard devices.
- **Security:** Payment data is handled securely in the simulated environment; backend endpoints are protected.
- **Scalability:** Backend supports multiple concurrent users.
- **Usability:** Interface is intuitive and user-friendly.

---

#### 6. Technologies Used

- **Frontend:** HTML, CSS, JavaScript, Bootstrap (for responsive design)
- **Backend:** Node.js with Express, JSON for data storage

---

#### 7. Future Enhancements

- Add real user authentication for account creation and login.
- Integrate a real payment gateway (e.g., Stripe, PayPal).
- Expand the blog with categories and search.
- Replace JSON with a scalable database (e.g., MongoDB or MySQL).

